[inet_http_server]
port = 0.0.0.0:9000
username = fang
password = ut7I0L


[program:task]  # 管理进程的命名
# process_name=%(program_name)s  # 指定进程名称，默认为 program 段冒号后指定的名称
user=root  # 指定用户
#directory=test  # 命令执行的工作空间，运行程序前将先 chdir 到指定目录
#environment=A="1",B="2"  # 环境变量设置

command=python3 -u /var/test.py  # 执行的命令python脚本加-u， shell脚本中要加exec
numprocs=1  # 进程数量，supervisor 可对一个 program 启动多个进程
#priority=999  # 优先级，值越高的程序将最后被启动最先被关闭，默认值 999
autostart=true  # supervisor启动时程序自动启动
autorestart=true  # 程序异常退出自动重启
# startsecs=10  # 程序启动多长时间后才确定为启动成功, 默认 1 秒
# startretries=3  # 启动尝试次数,默认 3 次
# exitcodes=0  # 列出进程预期的退出码，逗号分隔，默认0
# stopsignal=TERM  # 停止进程的信号，默认 TERM(kill -TERM pid) 其它见附录1;
stopasgroup=true
killasgroup=true  # 结束时结束整个进程组，通过这两项配置(改为 true)，可确保所有子进程都能正确停止, 默认是 false

stdout_logfile= "标准日志路径"  # 标准日志输出路径
stdout_logfile_maxbytes=50MB  # 标准日志文件大小，默认 50MB
stdout_logfile_backups=5  # 标准日志文件备份保留的数量，默认 10

redirect_stderr=false # 重定向错误流到标准输出
stderr_logfile= "错误日志路径"  # 错误日志输出路径
stderr_logfile_maxbytes=50MB
stderr_logfile_backups=10



# 附录1.stopsignal
# 中断: INT(类似于Ctrl+C)(kill -INT pid), 退出后会将写文件或日志(推荐)
# 终止: TERM(kill -TERM pid)
# 挂起: HUP(kill -HUP pid),注意与Ctrl+Z/kill -stop pid不同
# 从容停止: QUIT(kill -QUIT pid)
# KILL, USR1, USR2，其他见命令(kill -l)











